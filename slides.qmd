---
title: "GRChombo and GRTeclyn"
subtitle: "Panel discussion introduction"
date: "2025-07-23"
date-format: "dddd DD MMMM YYYY"
format:
  clean-revealjs:
    embed-resources: false
    transition: slide
    footer: New Frontiers in NR 2025
    sc-sb-title: true
    auto-play-media: true
    menu:
      openButton: false
title-slide-attributes:
  data-background-image: media/nr-amrex-fade.png
  data-background-opacity: 80%
  data-background-position: right
  data-background-size: contain

filters:
 - reveal-header

authors:
 - name: Miren Radia
   role: Research Software Engineer
   affiliations:
     - name: University of Cambridge

---

## Predecessor/current code: [GRChombo](https://github.com/GRTLCollaboration/GRChombo) {.smaller}

:::: {.columns}

::: {.column width="50%"}

* Built on the [Chombo](https://commons.lbl.gov/spaces/chombo/pages/73468344/Chombo+-+Software+for+Adaptive+Solutions+of+Partial+Differential+Equations)
  libraries for "fully-adaptive" block-structured AMR
* Written in C++14
* Explicit vectorization through C++ templates to achieve good performance
* Hybrid MPI + OpenMP parallelization
* Project started in ~2012 with code becoming open source in 2018.
* Intended for more exotic problems than some other NR codes:
  * Cosmology: Inflation, cosmic strings, etc.
  * Boson stars/oscillatons/axion stars
  * Modified gravity
  * Higher-dimensional BHs
  * Much more

:::

::: {.column width="50%" style="text-align:center"}

![](media/grchombo-higherd-bh.png){height=200}

![](media/grchombo-string-radiation.png){height=200}

:::

::::

## Successor/future code: [GRTeclyn](https://github.com/GRTLCollaboration/GRTeclyn) {.smaller}

:::: {.columns}

::: {.column width="50%"}

* GRTeclyn is an in-development port of GRChombo to AMReX.
* "Teclyn" is Welsh for "tool".
* Features:
  * Built on the [AMReX](https://amrex-codes.github.io/amrex/) framework for
    block-structured AMR with good GPU support.
  * Higher-order spatial interpolation between coarser and finer levels than
    GRChombo.
  * Black-hole binary evolution
  * Familiar structure for existing GRChombo users
  * Tested and runs well on Nvidia, AMD and Intel GPUs
:::

::: {.column width="50%"}
![](media/grteclyn-grchombo-bbh-comparison.mp4)

![A bar chart showing the mean walltime taken to evolve a single timestep on
  various different GPUs and a CPU. The results are as follows: Intel Xeon
  Platinum 8480 CPU (480s), Nvidia GH200 GPU (56s), AMD MI300X GPU (76s), AMD
  MI210 GPU (358s), Nvidia A100 GPU (105s) and Intel PVC 1550 (176s).
  ](media/grteclyn-benchmarks.svg)\
:::

::::
## Methods {.smaller}

:::: {.columns}

::: {.column width="50%"}
* Cell-centred finite-difference discretization
* Block-structured AMR
  * Can emulate "moving boxes" for compact object binaries
  * Generally something more adaptive for more exotic spacetimes
  * Can fix some of the coarser grids to avoid regridding noise near GW extraction spheres
  * Arbitrary refinement criterion
* Method of lines
  * Fourth order Runge-Kutta time integration
  * Fourth or sixth-order spatial discretization

:::

::: {.column width="50%"}
* Kreiss-Oliger dissipation
* Boundary conditions:
  * Fourth order interpolation at finer level boundaries from coarser levels
  * Outgoing radiation (Sommerfeld)
  * Symmetric/reflective
  * Extrapolating
* CCZ4 evolution system
* Moving puncture gauge conditions
:::

::::

## Coding paradigms {.smaller}

:::: {.columns}

::: {.column width="60%"}

* Simple structure in modern C++ that is easy to adapt to new problems.
  * We inherit this from Chombo/AMReX (both very similar).
* No complicated code-generation procedures
  * Easier to debug and/or modify
* Low number of dependencies
  * Easier to set up/simplifies portability
* Performance optimization e.g.:
  * GRChombo: Explicit vector intrinsics instead of relying on compiler
    auto-vectorization
  * GRTeclyn: No GPU managed memory to keep data GPU-resident and avoid
    unnecessary transfers

:::

::: {.column width="40%"}

<!-- ![](media/code.svg){height="150"} -->

![](media/debugging.png){width="100%"}

<!-- ![](media/dependencies.svg){width="150"} -->


:::

::::

## Challenges and solutions {.smaller}

### Shorter term

:::: {.columns}

::: {.column width="50%"}

#### Challenges

* Transitioning GRChombo users to GRTeclyn
* Training research users how to modify/develop/run in a GPU-performant way
* Improving scientific productivity (time and computational resources)

:::

::: {.column width="50%"}

#### Solutions

* Training/group hackathons
* Better documentation
* Collaborate with other codes on developing shared tools

:::

::::

### Longer term

* Future GPU performance is only really improving in lower precision floating
  point datatypes (e.g. 32 bit, 16 bit, 8 bit and even lower).
  * Like everyone else we currently use FP64 (double precision) everywhere.
  * We will need *more* accuracy for future GW detectors, not less!



# Any questions? {background-color="#40666e"
  background-image="media/nr-amrex-fade.png" background-size="contain"
  background-position="right"}

## Why [AMReX](https://amrex-codes.github.io/)? {.smaller}

* Mature and performant cross-vendor (Nvidia/AMD/Intel) GPU support
* Similar block-structured AMR capabilities to Chombo[^1]
* AMReX previously received significant support as part of the
  US [Exascale Computing Program](https://www.exascaleproject.org/) (ECP).
  * There are many AMReX applications across diverse research areas.
  * Large user community (Slack workspace/GitHub discussions)
* AMReX is now an established project in the [High Performance Software Foundation](https://hpsf.io/).
* Helpful and very active development team:
  * In particular, Weiqun Zhang has been instrumental in helping us to get started.

::: {layout-nrow="1"}

![](media/amrex-logo.png){width=300}

![](https://www.exascaleproject.org/wp-content/themes/exascale/images/ecp-logo.png){width=200}

![](https://hpsf.io/wp-content/uploads/sites/18/2024/11/HPSF_horizontal-tagline-color.svg){width=200}


:::

[^1]: Both Chombo and AMReX originated from the same BoxLib software so APIs are
      very similar.
