---
title: "GRTeclyn and MHDuet"
subtitle: "Numerical Relativity with AMReX"
date: "2025-06-18"
date-format: "dddd DD MMMM YYYY"
format:
  clean-revealjs:
    embed-resources: false
    transition: slide
    logo: media/cosec-stfc-header-logo.png
    footer-logo-link: https://www.cosec.ac.uk/
    footer: Gregynog Numerical Relativity 2025
    sc-sb-title: true
    auto-play-media: true
    menu:
      openButton: false
title-slide-attributes:
  data-background-image: media/nr-amrex-fade.png
  data-background-opacity: 80%
  data-background-position: right
  data-background-size: contain

filters:
 - reveal-header

authors:
 - name: Miren Radia
   role: Research Software Engineer
   affiliations:
     - name: University of Cambridge

---
# Introduction {background-color="#40666e"
  background-image="media/nr-amrex-fade.png" background-size="contain"
  background-position="right"}

## Who are we? {.smaller}

* I am a Research Software Engineer (RSE) in Research Computing Services,
  University of Cambridge.
* Previously, I completed a PhD in numerical relativity.
* I am involved with several numerical relativity codes/projects/collaborations:

:::: {.columns}

::: {.column width="40%"}

### GRTeclyn

::: {layout-nrow="2" style="text-align:center;"}
![Katy Clough](media/katy.png){fig-align="left"}

![Eugene Lim](media/eugene.png){fig-align="left"}

![Juliana Kwan](media/juliana.png){fig-align="left"}

![Paul Shellard](media/paul.png){fig-align="left"}

![Pau Figueras](media/pau.png){fig-align="left"}

![Ericka Florio](media/ericka.png){fig-align="left"}
:::

:::

::: {.column width="20%"}

### MHDueT

::: {layout-nrow="2" style="text-align:center;"}
![Miguel Bezares](media/miguel.png){height=130}

![Carlos Palenzuela](media/carlos.jpg){height=130}
:::

:::

::: {.column width="40%"}
### UKNR CCP

::: {layout-nrow="2" style="text-align:center;"}
![Eugene Lim](media/eugene.png){fig-align="left"}

![Katy Clough](media/katy.png){fig-align="left"}

![Mark Hannam](media/mark.jpg){fig-align="left"}

![Geraint Pratten](media/geraint.jpg){height=130}

![Patricia Schmidt](media/patricia.jpg){height=130}

:::

:::

::::

## Common methods {.smaller}

:::: {.columns}

::: {.column width="50%"}
* Discretization:
  * **Finite differences**
    * **Cell-centered**
    * **Vertex/node-centered**
  * Finite volume (for fluids)
  * Spectral methods
  * Discontinuous Galerkin (DG) methods
* Finite-difference mesh refinement:
  * **Block-structured AMR**
    * "Moving boxes" for compact object binaries
    * More adaptive for more exotic spacetimes
  * Oct-tree AMR
:::

::: {.column width="50%"}
* Method of lines
  * **Fourth order Runge-Kutta time integration**
  * **Fourth or sixth-order spatial discretization**
* **Kreiss-Oliger dissipation**
* Boundary conditions:
  * **Outgoing radiation (Sommerfeld)**
  * **Symmetric/reflective**
  * **Extrapolating**
  * Multipatch approaches: separate (e.g. spherical) outer grids
:::

::::
## NR codes {.smaller}

There are many NR codes/frameworks including (but by no means limited to):

:::: {.columns}

::: {.column width="30%"}
### Oct-tree AMR
* [GR-Athena++](https://doi.org/10.3847/1538-4365/ac157b)
* [Gmunu](https://doi.org/10.1093/mnras/stab2606)
* [Dendro-GR](https://paralab.github.io/Dendro-GR/)
* [GRAMSES](https://doi.org/10.1088/1475-7516/2020/01/007)
:::

::: {.column width="30%"}
### [Pseudo-]spectral/DG codes
* [SpEC](https://www.black-holes.org/for-researchers/spec)/[SpECTRE](https://spectre-code.org/)
* [bamps](https://doi.org/10.1103/PhysRevD.93.063006)
* [SFINGE](https://doi.org/10.1007/s10714-021-02865-5)

### Other
* [SENR/NRPy+](https://nrpyplus.net/)
:::

::: {.column width="40%"}
### Block-structured AMR
* [Cactus](https://www.cactuscode.org/)/[Einstein Toolkit](https://www.einsteintoolkit.org/)$^{\dagger}$
  * [McLachlan](https://www.cct.lsu.edu/~eschnett/McLachlan/), [LazEv](https://ccrg.rit.edu/content/software/lazev), [Maya](http://dx.doi.org/10.1088/0264-9381/24/12/S04), [Lean](http://dx.doi.org/10.1103/PhysRevD.76.104015), [Canuda](https://doi.org/10.5281/zenodo.3565474), ...
* [BAM](https://doi.org/10.1103/PhysRevD.54.7361)
* [PAMR/AMRD libraries](https://fpretori.scholar.princeton.edu/group-resources)
* [Hahndol/PARAMESH](http://dx.doi.org/10.1103/PhysRevLett.96.111102)
* [HAD](http://dx.doi.org/10.1088/0264-9381/23/22/025)
* [CosmoGRaPH](https://cwru-pat.github.io/cosmograph/)
* [Simflowny](https://bitbucket.org/iac3/simflowny/src/master/)/[**MHDueT**](http://mhduet.liu.edu/)$^{\dagger}$
* [GRChombo](https://github.com/GRTLCollaboration/GRChombo)/[**GRTeclyn**](https://github.com/GRTLCollaboration/GRTeclyn)$^{\dagger}$
:::

::::

${\dagger}$ denotes codes/frameworks that are either transitioning to or
developing support for using AMReX.

# GRTeclyn {background-color="#40666e"
  background-image="media/nr-amrex-fade.png" background-size="contain"
  background-position="right"}

## The GRTeclyn code {.smaller}

:::: {.columns}

::: {.column width="50%"}
* GRTeclyn is an in-development port of GRChombo (previously built on the Chombo
  libraries) to AMReX.
* "Teclyn" is Welsh for "tool".
* Features
  * `Amr` based
  * Cell-centered but finite-difference rather than finite-volume
    * Fourth-order cell-centered interpolator from coarse to fine (`CellQuartic`)
    * Fourth-order interpolation from fine to coarse
  * Fourth-order Runge-Kutta time integration
  * Currently, just `BinaryBH` example which evolves black-hole binaries.
  * Designed to be flexible and easy to adapt to new problems.

:::

::: {.column width="50%"}
{{< video media/grteclyn-grchombo-bbh-comparison.mp4 >}}

![A bar chart showing the mean walltime taken to evolve a single timestep on
  various different GPUs and a CPU. The results are as follows: Intel Xeon
  Platinum 8480 CPU (480s), Nvidia GH200 GPU (56s), AMD MI300X GPU (76s), AMD
  MI210 GPU (358s), Nvidia A100 GPU (105s) and Intel PVC 1550 (176s).
  ](media/grteclyn-benchmarks.svg)\
:::

::::

## Recent development {.smaller}

:::: {.columns}

::: {.column width="50%"}
* Black-hole puncture tracking:
  * Allows us to track the "centers" of black hole during the simulation.
  * Uses AMReX's particle infrastructure.
  * Typically 2 BHs so just 2 puncture particles so maybe overkill.
  * Good experience for future particle use.
* AMD MI300A hackathon:
  * Lots of variables so high register pressure in RHS kernels.
  * Legacy complicated data structure from GRChombo increases this.
  * Refactoring led to a ~2x speedup in RHS kernels (~40% overall) on AMD MI300A
    APUs.
* Currently working on adding support for basic matter.
:::

::: {.column width="50%"}
::: {style="text-align: center"}
![A plot showing the trajectories of the two punctures in a binary black-hole
  simulation. The punctures spiral inwards and complete ~10 orbits before
  merging](media/punctures.svg){height=320}\

![A bar chart showing the mean walltime to run a benchmark with the BinaryBH
 example on an AMD MI300A APU. There are 2 bars, one for before refactoring
 (103s) and one for after refactoring (60s)](media/mi300-hackathon-results.svg)\
:::
:::

::::

# MHDueT {background-color="#40666e" background-image="media/nr-amrex-fade.png"
 background-size="contain" background-position="right"}

## The MHDueT code {.smaller}

:::: {.columns}

::: {.column width="60%"}
* MHDueT is a code that is automatically generated using the Simflowny
  infrastructure.
* Previously used the SAMRAI library.
* Features
  * `AmrCore` based.
  * Mostly node-centered
    * Fifth order polynomial interpolation from coarse to fine
  * Custom fourth order Runga-Kutta time integration
  * Supports Magnetohydrodynamics (MHD)
    * High resolution shock capturing with WENO reconstruction
    * Arbitrary EOS via HDF5 tabulated input
  * Can simulate binaries of boson stars, neutron stars, black holes
    and more.
  * Auto-generated using Simflowny infrastructure to enable minimal user
    programming.
:::

::: {.column width="40%"}
::: {style="text-align: center"}
![MHDueT logo](media/mhduet-logo.png){height=250}\

![A visualization of the formation of magnetically dominated jets in
  hypermassive neutron stars produced by a binary merger simulated using MHDueT.
  ](media/mhduet-jetformation.png)\
:::
:::

::::

## Recent development

* Addition of nodal syncing when filling boundary nodes to prevent instabilities
  (only appeared on GPUs).
* Refactoring of custom higher-order extrapolating BCs to speed up these loops
  ~3000x on Nvidia A100 GPUs.
* Reimplementation of reduction calculation to use AMReX `ParReduce` functions
  rather than custom code ported from SAMRAI which was neither GPU-offloaded
  nor threaded/threadsafe.
* Dependency build scripts are now just Spack environments rather than a
  collection of custom shell scripts.

# Future work {background-color="#40666e"
  background-image="media/nr-amrex-fade.png" background-size="contain"
  background-position="right"}

## Particles {.smaller}

:::: {.columns}

::: {.column width="50%"}
* Extend "diagnostic" particles in GRTeclyn to allow high-order interpolation of
  state variables at arbitrary points in the domain for use with
  * GW extraction on coordinate spheres
  * Apparent horizon finding (~the boundary of black holes)
  * Matter flux around coordinate spheres
* Add physical particles in GRTeclyn to model collisionless dark matter
  particles.
* Add geodesic tracer particles to investigate behaviour around compact objects.
* MHDueT already uses particles in their old SAMRAI version to model neutrino
  transport in high-density, hot fluid matter.
  * Port this feature to AMReX version.
:::

::: {.column width="50%"}
![An AI generated visualization of a sphere of particles enclosing a black-hole
  binary emitting gravitational waves.
  ](media/gw-extraction-sphere-particles.png)\
:::

::::

## UKNR Collaborative Computational Project

* We have been awarded a grant to build a roadmap for the creation of a [UK
  Numerical Relativity](http://www.uknumericalrelativity.org/)
  [Collaborative Computational Project/Community
  (CCP)](https://www.uknumericalrelativity.org/uknr-ccp-development) as
  part of the [Computational Science Centre for Research Communities
  (CoSeC)](https://www.cosec.ac.uk/) programme.
* This would provide long-term funding for our scientific community including
  shared cross-community code development.
* As part of the technical branch of this grant we will:
  * Benchmark the performance of existing NR codes in use by UK researchers,
    and assess their readiness for future systems.
  * Identify opportunities to make data formats more interoperable and allow
    codes to share simulation/initial data.
  * Investigate the possibility of developing common [analysis] tools for NR
    codes.

# Any questions? {background-color="#40666e"
  background-image="media/nr-amrex-fade.png" background-size="contain"
  background-position="right"}

::: header

:::